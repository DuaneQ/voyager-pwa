# This file was auto-generated by the Firebase CLI
# https://github.com/firebase/firebase-tools

name: Deploy to Firebase Hosting on PR
on:
  pull_request:
  push:
    branches:
      - main
permissions:
  checks: write
  contents: read
  pull-requests: write
jobs:
  build_and_preview:
    # Only run preview deploy on PRs originating from the same repository by default.
    # This prevents exposing repo secrets to forks. If you want to allow forked PR previews,
    # consider creating a repository dispatch or using a maintainer workflow to re-run this job.
    if: ${{ github.event.pull_request.head.repo.full_name == github.repository }}
    runs-on: ubuntu-latest
    outputs:
      preview_url: ${{ steps.firebase_deploy.outputs.preview_url }}
      details_url: ${{ steps.firebase_deploy.outputs.details_url }}
    steps:
      - uses: actions/checkout@v4
      - name: Debug origin info (for skipped preview diagnostics)
        run: |
          echo "PR head repo: ${{ github.event.pull_request.head.repo.full_name }}"
          echo "Base repo: ${{ github.repository }}"
          if [ "${{ github.event.pull_request.head.repo.full_name }}" != "${{ github.repository }}" ]; then
            echo "::warning::This PR originates from a fork. The preview deploy job will be skipped to avoid exposing secrets."
          fi
      - run: npm init
      - run: npm install --save firebase --legacy-peer-deps

      - name: Security audit (report only)
        run: |
          echo "üîç Running security audit..."
          npm audit --audit-level=moderate || echo "‚ö†Ô∏è Vulnerabilities found - check output above"

      - name: Security audit (fail on critical only)
        run: npm audit --audit-level=critical

      - run: CI=false npm run build
        env:
          REACT_APP_ENV: development
          REACT_APP_GOOGLE_PLACES_API_KEY: ${{ secrets.REACT_APP_GOOGLE_PLACES_API_KEY }}

      - name: "Preflight: check required secrets for preview deploy"
        run: |
          missing=0
          if [ -z "${{ secrets.FIREBASE_SERVICE_ACCOUNT_DEV }}" ]; then
            echo "::error::Missing required secret: FIREBASE_SERVICE_ACCOUNT_DEV"
            missing=1
          fi
          if [ $missing -eq 1 ]; then
            echo "Aborting: required secrets are missing for preview deploy."
            exit 1
          fi
      - uses: FirebaseExtended/action-hosting-deploy@v0
        id: firebase_deploy
        with:
          repoToken: ${{ secrets.GITHUB_TOKEN }}
          firebaseServiceAccount: ${{ secrets.FIREBASE_SERVICE_ACCOUNT_DEV }}
          projectId: mundo1-dev
      - name: Debug Firebase Deploy Outputs
        run: |
          echo "preview_url: ${{ steps.firebase_deploy.outputs.preview_url }}"
          echo "details_url: ${{ steps.firebase_deploy.outputs.details_url }}"
          echo "details_path: ${{ steps.firebase_deploy.outputs.details_path }}"

  cypress_tests:
    needs: build_and_preview
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - run: npm ci --legacy-peer-deps

      - name: Security audit (report only)
        run: |
          echo "üîç Running security audit..."
          npm audit --audit-level=moderate || echo "‚ö†Ô∏è Vulnerabilities found - check output above"

      - name: Security audit (fail on critical only)
        run: npm audit --audit-level=critical

      - name: Debug Preview URL
        run: |
          if [ -z "$CYPRESS_BASE_URL" ]; then
            echo "CYPRESS_BASE_URL is empty! Check the build_and_preview job outputs."
            exit 1
          else
            echo "Preview URL is $CYPRESS_BASE_URL"
          fi
        env:
          CYPRESS_BASE_URL: ${{ needs.build_and_preview.outputs.details_url }}
      - name: Wait for Server to Start
        run: |
          for i in {1..10}; do
            curl -s $CYPRESS_BASE_URL && break || sleep 5
          done
      - name: Run Cypress E2E and Component Tests
        env:
          CYPRESS_BASE_URL: ${{ needs.build_and_preview.outputs.details_url }}
        run: npm run test:ci # <-- Make sure this generates a coverage report, e.g. ./coverage-e2e/lcov.info
      - name: Upload Cypress coverage to Codecov
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./coverage-e2e/lcov.info
          flags: e2e
          fail_ci_if_error: false

  coverage:
    needs: cypress_tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - run: npm ci --legacy-peer-deps
      - name: Run unit tests with coverage
        run: npm test -- --coverage --watchAll=false
      - name: Upload unit test coverage to Codecov
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./coverage/lcov.info
          flags: unittests
          fail_ci_if_error: false
