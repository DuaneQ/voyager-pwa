// Prisma schema for PostgreSQL itineraries
// You can extend this as needed

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Itinerary {
  // Primary identifier - keep UUID default but allow explicit ids when migrating
  id               String   @id @default(uuid())

  // Basic scalar fields commonly used across the UI
  userId           String?  @db.Text
  destination      String?  @db.Text
  title            String?  @db.Text
  description      String?  @db.Text

  // Canonical date fields (stored as timestamptz)
  startDate        DateTime? @db.Timestamptz(6)
  endDate          DateTime? @db.Timestamptz(6)

  // Millisecond epoch day fields used throughout the app
  startDay         BigInt?  @db.BigInt
  endDay           BigInt?  @db.BigInt

  // Ranged filters
  lowerRange       Int?     
  upperRange       Int?

  // Simple preference fields
  gender           String?  @db.Text
  sexualOrientation String? @db.Text
  status           String?  @db.Text
  age              Int?     // User's age for efficient filtering

  // Arrays / lists stored as JSON for flexibility
  likes            Json?    
  activities       Json?

  // User snapshot (username, uid, email, dob, blocked list etc.)
  userInfo         Json?

  // AI / server response and rich nested content
  response         Json?    // full server-side response object
  metadata         Json?    // canonical metadata - should mirror response.data.metadata
  externalData     Json?    // externalData.hotelRecommendations and similar
  recommendations  Json?
  costBreakdown    Json?

  // AI-specific convenience fields
  dailyPlans       Json?
  days             Json?
  flights          Json?
  accommodations   Json?
  ai_status        String?  @db.Text

  // Timestamps
  createdAt        DateTime @default(now()) @db.Timestamptz(6)
  updatedAt        DateTime @updatedAt @db.Timestamptz(6)

  @@map("itineraries")
  @@index([userId])
  @@index([startDate])
}
